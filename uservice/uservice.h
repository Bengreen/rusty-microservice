#ifndef uservice_h
#define uservice_h

/* Generated with cbindgen:0.20.0 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/**
 * Start the microservice and keep exe control until it is complete
 *
 * Start the microservice and retain exec until the service exits.
 *
 * ```
 * uservice::serviceStart();
 * ```
 */
void serviceStart(void);

/**
 * Stop the microservice and wait for shutdown to complete before yielding thread
 *
 * Signal to the running service (probably started in a thread) that the service is to be stopped.
 * ```
 * use std::{thread, time};
 * let thandle = std::thread::spawn(move || {
 *     uservice::serviceStop();
 * });
 * thread::sleep(time::Duration::from_secs(3));
 * uservice::serviceStop();
 *
 * thandle.join().expect("UService thread complete");
 * ```
 *
 */
void serviceStop(void);

/**
 * Create a health probe
 *
 * Create a health probe that can be used to track health of a part of the service and used within a healthcheck to create a readiness or liveness check.
 *
 * ```
 * use std::ffi::{CString};
 * let health_name = CString::new("USERVICE_LOG_LEVEL").expect("CString::new failed");
 *
 * let hc = uservice::createHealthProbe(health_name.as_ptr(), 2);
 * assert_eq!(hc, 20);
 * ```
 */
int createHealthProbe(const char *name,
                      int margin_ms);

/**
 * Create a call back register function
 *
 * This will store the function provided, making it avalable when the callback is to be triggered
 */
int32_t register_service(int32_t (*init)(int32_t), int32_t (*process)(int32_t));

/**
 * Unregister service from exec environment.
 *
 * Note this does not ensure to check if the function is currently running or that it may be running an async thread.
 * It simply disconnected the callback to stop it being called in future.
 */
int32_t unregister_service(void);

/**
 * Run the process function
 *
 * Call the process function.
 * Throws a panic if the service has not been registered prior to calling this function.
 */
int32_t process(int32_t a);

/**
 * Initialise the FFI based logging for this crate
 */
void uservice_init_logger_ffi(LogParam param);

#endif /* uservice_h */
